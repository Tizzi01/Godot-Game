[gd_scene load_steps=12 format=3 uid="uid://dikfgaeqdng3d"]

[ext_resource type="Texture2D" uid="uid://canfsqyqpe8qy" path="res://Assets for the acual game/Assets/Sprites/Player Animation/idle/0.png" id="1_i7wno"]

[sub_resource type="GDScript" id="GDScript_vxcno"]
script/source = "extends CharacterBody2D
class_name Player

@export var walk_speed = 150.0
@export var run_speed = 250.0
@export_range(0,1) var acceleration = 0.1
@export_range(0,1) var decceleration = 0.1

@export var jump_force = -300.0
@export_range(0,1) var deccelerate_on_jump_release = 0.5

# slash
var m1_node: Node = null
var hitbox: Area2D = null
var slash_anim: AnimationPlayer = null
@onready var anim_player: AnimationPlayer = $PlayerSprite/AnimationPlayer

# dashing
@export var dash_speed = 500.0
@export var dash_max_distance = 75.0
@export var dash_curve : Curve
@export var dash_cooldown = 0.5

@export var m1_radius: float = 20.0
@export var m1_follow_speed: float = 10.0

var is_dashing = false
var dash_start_position = Vector2.ZERO
var dash_direction = Vector2.ZERO
var dash_timer = 0.0

var was_on_floor = true
var is_jumping = false
@export var max_jumps = 99
var jump_count = 0

@onready var sprite: Sprite2D = $PlayerSprite

# teleport hover
var teleporting = false
var teleport_hovering = false
var teleport_hover_timer = 0.0
var teleport_hover_max_time = 2.0
var last_facing_dir = 1

# damage
@onready var texture_progress_bar: TextureProgressBar = $TextureProgressBar
@export var HP : int = 100

# m1 tracking
var m1_mouse_pos: Vector2 = Vector2.ZERO

func _ready() -> void:
	set_health()

	# Find m_1 using group lookup
	var group_members = get_tree().get_nodes_in_group(\"m1\")
	if group_members.size() > 0:
		m1_node = group_members[0]
		m1_node.visible = false
		m1_node.set_process(false)

		hitbox = m1_node.get_node_or_null(\"Sprite2D/MyHitBox\")
		slash_anim = m1_node.get_node_or_null(\"AnimationPlayer\")

		if hitbox:
			hitbox.monitoring = false
	else:
		push_warning(\"⚠️ No node found in group 'm1'\")

func set_health() -> void:
	texture_progress_bar.max_value = HP
	texture_progress_bar.value = HP

func update_health(Amount : int) -> void:
	HP += Amount
	texture_progress_bar.value = HP

func _physics_process(delta):
	if not teleporting:
		m1_mouse_pos = get_global_mouse_position()

	# Hover freeze
	if teleport_hovering:
		velocity = Vector2.ZERO
		teleport_hover_timer += delta
		anim_player.play(\"Idle\")

		if teleport_hover_timer >= teleport_hover_max_time or Input.is_action_just_pressed(\"jump\") or Input.is_action_just_pressed(\"dash\") or Input.is_action_pressed(\"left\") or Input.is_action_pressed(\"right\"):
			teleport_hovering = false
			teleporting = false
			teleport_hover_timer = 0.0

	var speed = walk_speed
	if Input.is_action_pressed(\"run\"):
		speed = run_speed

	var input_vector = Vector2(
		Input.get_action_strength(\"right\") - Input.get_action_strength(\"left\"),
		Input.get_action_strength(\"down\") - Input.get_action_strength(\"up\")
	).normalized()

	if input_vector.x != 0:
		last_facing_dir = sign(input_vector.x)

	velocity.x = move_toward(velocity.x, input_vector.x * speed, speed * acceleration)
	velocity.y = move_toward(velocity.y, input_vector.y * speed, speed * acceleration)

	if Input.is_action_just_pressed(\"jump\"):
		if is_on_floor():
			velocity.y = jump_force
			jump_count = 1
		elif jump_count < max_jumps:
			velocity.y = jump_force
			jump_count += 1

		if teleporting:
			teleport_hovering = false
			teleporting = false
			teleport_hover_timer = 0.0

	if is_on_floor():
		jump_count = 0

	sprite.flip_h = last_facing_dir < 0

	if Input.is_action_just_pressed(\"dash\") and not is_dashing and dash_timer <= 0:
		is_dashing = true
		dash_start_position = global_position
		dash_direction = input_vector
		dash_timer = dash_cooldown

		if teleporting:
			teleport_hovering = false
			teleporting = false
			teleport_hover_timer = 0.0

	if is_dashing:
		if dash_direction.length() < 0.1:
			is_dashing = false
		else:
			var current_distance = global_position.distance_to(dash_start_position)
			if current_distance >= dash_max_distance or is_on_wall():
				is_dashing = false
			else:
				velocity = dash_direction * dash_speed * dash_curve.sample(current_distance / dash_max_distance)

	if dash_timer > 0:
		dash_timer -= delta

	if Input.is_action_just_pressed(\"tp\"):
		var target_pos = get_global_mouse_position()
		var space_state = get_world_2d().direct_space_state
		var shape = $CollisionShape2D.shape.duplicate()

		var query = PhysicsShapeQueryParameters2D.new()
		query.shape = shape
		query.transform = Transform2D.IDENTITY.translated(target_pos)
		query.collide_with_areas = true
		query.collide_with_bodies = true

		var result = space_state.intersect_shape(query)

		if result.is_empty():
			global_position = target_pos
		else:
			var collision = result[0]
			if collision.has(\"normal\"):
				var push_dir = collision[\"normal\"].normalized()
				var safe_pos = target_pos + push_dir * 10.0

				query.transform = Transform2D.IDENTITY.translated(safe_pos)
				var recheck = space_state.intersect_shape(query)

				if recheck.is_empty():
					global_position = safe_pos
				else:
					print(\"Blocked! Can't teleport too close to wall.\")
			else:
				print(\"Collision has no normal — skipping safe push.\")

		teleporting = true
		teleport_hovering = true
		teleport_hover_timer = 0.0
		velocity = Vector2.ZERO
		anim_player.play(\"Idle\")

	if velocity == Vector2.ZERO and not teleporting and not is_dashing:
		if Input.is_action_pressed(\"left\") or Input.is_action_pressed(\"right\") or Input.is_action_pressed(\"up\") or Input.is_action_pressed(\"down\"):
			velocity = input_vector * walk_speed
			print(\"✅ Unstuck player with input\")

	if is_on_floor() and velocity.x == 0:
		anim_player.play(\"Idle\")

	move_and_slide()

func _input(event: InputEvent) -> void:
	if m1_node and m1_node.visible and event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
		if slash_anim and not slash_anim.is_playing():
			slash_anim.play(\"slash\")

		if teleporting:
			teleport_hovering = false
			teleporting = false
			teleport_hover_timer = 0.0 
"

[sub_resource type="Animation" id="Animation_vxcno"]
resource_name = "Idle"
length = 1.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.766667, 1.5),
"transitions": PackedFloat32Array(-2, -2, -2),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, -1.82), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PlayerSprite:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.766766, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(0.0380787, 0.0380787), Vector2(0.0380787, 0.0380787), Vector2(0.0380787, 0.0380787)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerSprite:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_qjmxq"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PlayerSprite:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0.0380787, 0.0380787)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerSprite:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_hls0o"]
resource_name = "dash"
length = 1.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.366667, 1.214, 1.46587),
"transitions": PackedFloat32Array(-2, -2, -2, 1),
"update": 0,
"values": [Vector2(0, -2.26), Vector2(0, 0.06), Vector2(0, 0.06), Vector2(0, 1.18837e-06)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PlayerSprite:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.366667, 1.214, 1.46587),
"transitions": PackedFloat32Array(-2, -2, -2, 1),
"update": 0,
"values": [0.0, 0.610865, 0.610865, 0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerSprite:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.366667, 1.214, 1.46587),
"transitions": PackedFloat32Array(-2, -2, -2, 1),
"update": 0,
"values": [Vector2(0.038, 0.038), Vector2(0.038, 0.038), Vector2(0.038, 0.038), Vector2(0.038, 0.038)]
}

[sub_resource type="Animation" id="Animation_prhqr"]
resource_name = "fall"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, -2.26)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PlayerSprite:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerSprite:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0.038, 0.0338148)]
}

[sub_resource type="Animation" id="Animation_kn884"]
resource_name = "jump"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.398293),
"transitions": PackedFloat32Array(0.5, 0.5, 1),
"update": 0,
"values": [Vector2(0.0380787, 0.0380787), Vector2(0.0380787, 0.0301505), Vector2(0.0380787, 0.0431134)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PlayerSprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.398293),
"transitions": PackedFloat32Array(0.5, 0.5, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, 2), Vector2(0, -2.71878)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerSprite:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_qxrvo"]
resource_name = "run"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.174533]
}

[sub_resource type="Animation" id="Animation_83akb"]
resource_name = "run_left"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerSprite:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [-0.174533]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PlayerSprite:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(-0.038, 0.038)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_kn884"]
_data = {
&"Idle": SubResource("Animation_vxcno"),
&"RESET": SubResource("Animation_qjmxq"),
&"dash": SubResource("Animation_hls0o"),
&"fall": SubResource("Animation_prhqr"),
&"jump": SubResource("Animation_kn884"),
&"run": SubResource("Animation_qxrvo"),
&"run_left": SubResource("Animation_83akb")
}

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_guesk"]
radius = 4.0
height = 28.0

[node name="Player" type="CharacterBody2D" groups=["player"]]
script = SubResource("GDScript_vxcno")

[node name="PlayerSprite" type="Sprite2D" parent="."]
scale = Vector2(0.0380787, 0.0380787)
texture = ExtResource("1_i7wno")

[node name="AnimationPlayer" type="AnimationPlayer" parent="PlayerSprite"]
root_node = NodePath("../..")
libraries = {
&"": SubResource("AnimationLibrary_kn884")
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 2)
shape = SubResource("CapsuleShape2D_guesk")

[node name="TextureProgressBar" type="TextureProgressBar" parent="."]
offset_right = 40.0
offset_bottom = 40.0
